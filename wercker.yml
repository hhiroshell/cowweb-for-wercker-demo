box:
  id: openjdk:8-jdk
  ports:
    - 8080

dev:
  steps:
    - script:
      name: info/env
      code: env
    - internal/watch:
      name: Run and Watch
      code: |
        ./gradlew bootRun
      reload: true

build:
  steps:
    - script:
      name: info/env
      code: env
    - script:
        name: prepare gradlew
        code: |
          chmod +x ./gradlew
    - script:
        name: gradle build
        code: |
          ./gradlew --full-stacktrace -q --project-cache-dir=$WERCKER_CACHE_DIR build

integration-test:
  steps:
    - script:
        name: Run and IT
        code: |
          java -jar $WERCKER_ROOT/build/libs/cowweb-0.1.jar &
          sleep 5
          ./gradlew --full-stacktrace -q --project-cache-dir=$WERCKER_CACHE_DIR integrationTest

push-to-releases:
  steps:
    - internal/docker-push:
        username: $REGISTRY_USERNAME
        password: $REGISTRY_PASSWORD
        repository: iad.ocir.io/gse00014510/acme-web-app/cowweb
        tag: v0.1
        ports: 8080
        cmd: java -jar /pipeline/source/build/libs/cowweb-0.1.jar

deploy-to-cluster:
  box:
    id: alpine
    cmd: /bin/sh
  steps:
    - kubectl:
        name: connection testing
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get nodes

    - kubectl:
        name: delete namespace
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete namespace $COWWEB_NAMESPACE --ignore-not-found=true

    - script:
        name: wait to delete namespace
        code: sleep 30

    - kubectl:
        name: create namespace
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create namespace $COWWEB_NAMESPACE

    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/manifests --namespace=$COWWEB_NAMESPACE

    - kubectl:
        name: get LoadBalancer public IP address
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get service -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --namespace=$COWWEB_NAMESPACE
